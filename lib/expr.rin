#include "tokens.rin"

function prior(t){
	if(t==",")return 10;
	else if(
		t=="="||t=="+="||t=="-="||t=="*="||t=="/="||t=="%="||
		t=="&="||t=="|="||t=="^="||t=="<<="||t==">>="
	) return 20;
	else if(t=="or")return 24;
	else if(t=="?")return 25;
	else if(t=="||")return 30;
	else if(t=="&&")return 40;
	else if(t=="|")return 50;
	else if(t=="^")return 60;
	else if(t=="&")return 70;
	else if(t=="=="||t=="!=")return 80;
	else if(
		t=="<"||t==">"||t=="<="||t==">="||
		t=="has"||t=="typeof"||t=="is"
	) return 90;
	else if(t=="<<"||t==">>")return 100;
	else if(t=="+"||t=="-")return 110;
	else if(t=="*"||t=="/"||t=="%")return 120;
	else if(t=="|"||t=="~")return 130;
	else if(t=="("||t=="["||t=="."||t=="->")return 140;
	return 1;
}
parse_args=null
parse_obj=null
compile_new=null
function compile_str(s){
	Console.printf("LOADSTR '{0}'",s)
}
function compile_var(s){
	Console.printf("LOADVAR '{0}'",s)
}
used_label=0
function label(){
	used_label+=1
	return "<label {0}>".format(used_label)
}
function expression(precd){
	c=curtok()
	liter=precd==140&&pretok().type=="."
	if(c.type=='('){
		readtok('(')
		expression(0)
		readtok(')')
	}
	else if(c.type=="true"){if(liter){compile_str(c.val);Console.print("GETADDR")}else{Console.print("LOADTRUE")};nexttok();}
	else if(c.type=="false"){if(liter){compile_str(c.val);Console.print("GETADDR")}else{Console.print("LOADFALSE")};nexttok();}
	else if(c.type=="null"){if(liter){compile_str(c.val);Console.print("GETADDR")}else{Console.print("LOADNULL")};nexttok();}
	else if(c.type=="undefined"){if(liter){compile_str(c.val);Console.print("GETADDR")}else{Console.print("LOADUNDEFINED")};nexttok();}
	else if(c.type=="this"){if(liter){compile_str(c.val);Console.print("GETADDR")}else{Console.print("LOADTHIS")};nexttok();}
	else if(c.type=="super"){if(liter){compile_str(c.val);Console.print("GETADDR")}else{Console.print("LOADSUPER")};nexttok();}
	else if(
		c.type=="if"||c.type=="else"||c.type=="while"||c.type=="return"||c.type=="for"||
		c.type=="break"||c.type=="continue"||c.type=="include"||c.type=="class"||c.type=="has"||
		c.type=="or"||c.type=="is"||c.type=="all"||c.type=="operator"||c.type=="constructor"||
		c.type=="public"||c.type=="protected"||c.type=="private"
	){if(liter){compile_str(c.val);Console.print("GETADDR")}else{System.abort("expected a property name, given '{0}'".format(c.val))};}
	else if(c.type=="var"){
		if(liter){compile_str(c.val);Console.print("GETADDR")}
		else{System.abort("'var' should not appear at this position")};
		nexttok();
	}
	else if(c.type=="new"){
		if(liter){compile_str(c.val);Console.print("GETADDR")}
		else compile_new()
		nexttok();
	}
	else if(c.type=="typeof"){
		if(liter){nexttok();compile_str(c.val);Console.print("GETADDR")}
		else{nexttok();expression(90);Console.print("TYPEOF")}
	}
	else if(c.type=="name"){
		if(liter){readtok();compile_str(c.val);Console.print("GETADDR")}
		else{compile_var(c.val)readtok();}
	}
	else if(c.type=='['){
		readtok('[')
		t=parse_args(']')
		readtok(']')
		Console.printf("LOADARR {0}",t)
	}
	else if(c.type=='{'){
		readtok('{')
		parse_obj()
		readtok('}')
	}
	else if(c.type=="number"){
		Console.printf("LOADNUM {0}",c.val)
		readtok();
	}
	else if(c.type=="hex"){
		Console.printf("LOADNUM {0}",dec(c.val))
		readtok();
	}
	else if(c.type=="string"){
		compile_str(c.val)
		readtok();
	}
	else if(c.val=='+'){
		readtok();
		expression(130)
		Console.print("POSITIVE")
	}
	else if(c.val=='-'){
		readtok();
		expression(130)
		Console.print("NEGATIVE")
	}
	else if(c.val=='!'){
		readtok();
		expression(120)
		Console.print("NOT")
	}
	else if(c.val=='~'){
		readtok();
		expression(120)
		Console.print("BITNOT")
	}
	else System.abort("unexpected {0}".format(c.val))
	while(remain()&&prior(curtok().val)>precd){
		c=curtok()
		if(c.val=="+"){nexttok();expression(110);Console.print("ADD")}
		else if(c.val=="-"){nexttok();expression(110);Console.print("SUB")}
		else if(c.val=="*"){nexttok();expression(120);Console.print("MUL")}
		else if(c.val=="/"){nexttok();expression(120);Console.print("DIV")}
		else if(c.val=="%"){nexttok();expression(120);Console.print("MOD")}
		else if(c.val=="<<"){nexttok();expression(100);Console.print("LSHF")}
		else if(c.val==">>"){nexttok();expression(100);Console.print("RSHF")}
		else if(c.val=="|"){nexttok();expression(50);Console.print("BITOR")}
		else if(c.val=="&"){nexttok();expression(60);Console.print("BITAND")}
		else if(c.val=="^"){nexttok();expression(70);Console.print("XOR")}
		else if(c.val=="+="){nexttok();expression(30);Console.print("ADDE")}
		else if(c.val=="-="){nexttok();expression(30);Console.print("SUBE")}
		else if(c.val=="*="){nexttok();expression(20);Console.print("MULE")}
		else if(c.val=="/="){nexttok();expression(20);Console.print("DIVE")}
		else if(c.val=="%="){nexttok();expression(20);Console.print("MODE")}
		else if(c.val=="<<="){nexttok();expression(20);Console.print("LSHFE")}
		else if(c.val==">>="){nexttok();expression(20);Console.print("RSHFE")}
		else if(c.val=="|="){nexttok();expression(20);Console.print("BITORE")}
		else if(c.val=="&="){nexttok();expression(20);Console.print("BITANDE")}
		else if(c.val=="^="){nexttok();expression(20);Console.print("XORE")}
		else if(c.val=="<"){nexttok();expression(90);Console.print("SML")}
		else if(c.val==">"){nexttok();expression(90);Console.print("BIG")}
		else if(c.val=="<="){nexttok();expression(90);Console.print("SMLE")}
		else if(c.val==">="){nexttok();expression(90);Console.print("BIGE")}
		else if(c.val=="=="){nexttok();expression(80);Console.print("EQL")}
		else if(c.val=="!="){nexttok();expression(80);Console.print("NEQ")}
		else if(c.val=="["){nexttok();expression(0);Console.print("GETADDR");readtok("]");}
		else if(c.val=="("){nexttok();t=parse_args(")");Console.printf("CALL {0}",t);readtok(")");}
		else if(c.val=="."){nexttok();expression(140);}
		else if(c.val=="="){nexttok();expression(20);Console.print("ASSIGN")}
		else if(c.val=="?"){
			nexttok();
			false_l=label();
			end_l=label();
			Console.printf("JUMP_IF_FALSE {0}",false_l) 
			expression(25); // true branch
			Console.printf("JUMP {0}",end_l)
			readtok(":")
			Console.printf(false_l)
			expression(25); // false branch
			Console.printf(end_l)
		}
		else if(c.val=="or"){nexttok();expression(24);Console.print("CHOOSE")}
		else if(c.val=="is"){nexttok();compile_str("'"+curtok().val+"'");nexttok();Console.print("ISA");}
		else if(c.val=="||"){nexttok();l=label();Console.printf("JUMP_IF_TRUE {0}",l);expression(30);Console.printf(l)}
		else if(c.val=="&&"){nexttok();l=label();Console.printf("JUMP_IF_FALSE {0}",l);expression(40);Console.printf(l)}
		else if(c.val==";"){nexttok();return 0;}
		else return 0;
	}
}
function parse_args(end){
	var cnt=0
	while(curtok().type!=end){
		expression(10)
		cnt+=1
		if(curtok().type==',')readtok(',')
	}
	return cnt
}
function parse_obj(){
	var cnt=0
	while(curtok().type!='}'){
		if(
			curtok().type=="name"||curtok().type=="number"||
			curtok().type=="true"||curtok().type=="false"||
			curtok().type=="null"||curtok().type=="undefined"
		) compile_str('"'+curtok().val+'"')
		else if(curtok().type=="string")compile_str(curtok().val)
		else System.abort("expected a property name, given {0}".format(curtok().val))
		nexttok()
		readtok(':')
		expression(0)
		if(curtok().type==',')readtok(',')
		cnt+=1
	}
	Console.printf("LOADOBJ {0}",cnt)
}
tokenize(Console.read_line())
expression(0)
