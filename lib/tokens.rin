class token{
	public var type
	public var val
	constructor(type,val){
		this.type=type
		this.val=val
	}
	constructor(val){
		this.type=val
		this.val=val
	}
	function to_str(){
		return "<{0}> '{1}'".format(this.type,this.val)
	}
}
tokens=[]
tokidx=0
function isdigit(c){
	return ascii(c)>=ascii('0')&&ascii(c)<=ascii('9')
}
function isalpha(c){
	return (ascii(c)>=ascii('a')&&ascii(c)<=ascii('z'))||(ascii(c)>=ascii('A')&&ascii(c)<=ascii('Z'))
}
function issymbol(c){
	return c=='('||c==')'||c=='['||c==']'||c=='{'||c=='}'||c=='.'||c==';'||c==','||c==':'||c=='?'
}
function isspace(c){
	return c==' '||c=='\n'||c=='\t'
}
function remain(){
	return tokidx<tokens.length()
} 
function curtok(){
	if(tokidx>=tokens.length())return new token("<end>")
	return tokens[tokidx]
}
function nexttok(){
	tokidx+=1
}
function readtok(c){
	if(c!=undefined){
		if(tokens[tokidx].type!=c)System.abort("expected {0}".format(c))
	}
	tokidx+=1
}
function getidtype(s){
	if(s!="function")
	&&(s!="if")// return TOK_IF;
	&&(s!="else")// return TOK_ELSE;
	&&(s!="while")// return TOK_WHILE;
	&&(s!="for")// return TOK_FOR;
	&&(s!="// return")// return TOK_RET;
	&&(s!="var")// return TOK_VAR;
	&&(s!="break")// return TOK_BREAK;
	&&(s!="continue")// return TOK_CTN;
	&&(s!="all")// return TOK_ALL;
	&&(s!="true")// return TOK_TRUE;
	&&(s!="false")// return TOK_FALSE;
	&&(s!="null")// return TOK_NULL;
	&&(s!="undefined")// return TOK_UNDEFINED;
	&&(s!="include")// return TOK_INCLUDE;
	&&(s!="this")// return TOK_THIS;
	&&(s!="class")// return TOK_CLASS;
	&&(s!="new")// return TOK_NEW;
	&&(s!="has")// return TOK_HAS;
	&&(s!="typeof")// return TOK_TYPEOF;
	&&(s!="or")// return TOK_CHOOSE;
	&&(s!="is")// return TOK_IS;
	&&(s!="operator")// return TOK_OP;
	&&(s!="constructor")// return TOK_CONSTRUCTOR;
	&&(s!="public")// return TOK_PUB;
	&&(s!="protected")// return TOK_PROT;
	&&(s!="private")// return TOK_PRIV;
	&&(s!="super")// return TOK_SUPER;
	return "name";
	return s
}
function tokenize(src:string){
	var loc=0;
	var Len=len;
	var len=len(src);
	while(loc<len){
		var c=src[loc],val="";
		if(isalpha(src[loc])||src[loc]=='_'){
			while((loc<len)&&(isalpha(src[loc])||isdigit(src[loc])||src[loc]=='_')){val+=src[loc];loc+=1;}
			tokens.push(new token(getidtype(val),val))
		}
		else if(isdigit(c)||c=='.'){
			var d=0,e=0,n=0
			if(src[loc]=='0'&&loc+1<len&&(src[loc+1]=='x'||src[loc+1]=='X')){
				val+=src[loc];loc+=1;
				val+=src[loc];loc+=1;
				while(loc<len&&(
					(isdigit(src[loc]))
					||
					(ascii(src[loc])>=ascii('a')&&ascii(src[loc])<=ascii('f'))
					||
					(ascii(src[loc])>=ascii('A')&&ascii(src[loc])<=ascii('F'))
				)){val+=src[loc];loc+=1;}
				tokens.push(new token("hex",val))
			}
			else{
				while((loc<len&&isdigit(src[loc]))||src[loc]=='.'||src[loc]=='E'||src[loc]=='e'||src[loc]=='-'){
					if(src[loc]=='.'){if(!d)d=1;else break;}
					if(src[loc]=='e'||src[loc]=='E'){if(n&&!e)e=1;else break;}
					if(src[loc]=='-'){if(loc-1>=0&&(src[loc-1]=='e'||src[loc-1]=='E'))pass;else break;}
					if(isdigit(src[loc]))n=1;
					val+=src[loc];loc+=1;
				}
				if(Len(val)==1&&val[0]=='.')tokens.push(new token(val))
				else tokens.push(new token("number",val))
			}
		}
		else if(src[loc]=='\''||src[loc]=='\"'){
			if(loc+2<len&&src[loc+1]==src[loc]&&src[loc+2]==src[loc]){
				var e=src[loc];
				loc+=2;
				while(loc+2<len&&!(src[loc]==e&&src[loc+1]==e&&src[loc+2]==e)){
					if(src[loc]=='\\'){val+=('\\');loc+=1;}
					val+=(src[loc]);loc+=1;
				}
				if(loc+2>=len)System.abort("uncompleted multi-line string, expected '{0}{0}{0}' at end".format(e));
				if(src[loc]==e){
					val+=(src[loc]);loc+=1;
				}
				loc+=2;
				tokens.push(new token("string",val));
			}
			else{
				var s=src[loc];val+=(src[loc]);loc+=1;
				while(loc<len&&src[loc]!=s&&src[loc]!='\r'&&src[loc]!='\n'){
					if(src[loc]=='\\'){val+=('\\');loc+=1;}
					val+=(src[loc]);loc+=1;
				}
				if(src[loc]==s){
					val+=(src[loc]);loc+=1;
				}
				tokens.push(new token("string",val));
			}
		}
		else if(src[loc]=='`'){
			var s=src[loc];val+=(src[loc]);loc+=1;
			while(loc<len&&src[loc]!=s&&src[loc]!='\r'&&src[loc]!='\n'){
				if(src[loc]=='\\')val+=('\\');
				val+=(src[loc]);loc+=1;
			}
			if(src[loc]==s){
				val+=(src[loc]);loc+=1;
			}
			tokens.push(new token("string",val));
		}
		else if(isspace(src[loc]))loc+=1;
		else{
			if(src[loc]=='+'||src[loc]=='*'||src[loc]=='%'||src[loc]=='^'||src[loc]=='='||src[loc]=='!'){
				val+=src[loc];loc+=1;
				if(loc<len&&src[loc]=='='){val+='=';loc+=1;}
				tokens.push(new token(val));
			}
			else if(src[loc]=='-'){
				val+=src[loc];loc+=1;
				if(loc<len&&(src[loc]=='='||src[loc]=='>')){val+=src[loc];loc+=1;}
				tokens.push(new token(val));
			}
			else if(src[loc]=='/'){
				if(loc+1<len&&src[loc+1]=='/'){
					loc+=1;
					while(loc<len&&src[loc]!='\n')loc+=1;
					loc+=1;
				}
				else if(loc+1<len&&src[loc+1]=='*'){
					loc+=1;
					while(loc+1<len&&!(src[loc]=='*'&&src[loc+1]=='/'))loc+=1;
					if(loc+1>=len)System.abort("uncompleted comment symbol, expected '*/' at end%c");
					loc+=2;
				}
				else{
					val+=src[loc];loc+=1;
					if(loc<len&&(src[loc]=='=')){val+=src[loc];loc+=1;}
					tokens.push(new token(val));
				}
			}
			else if(src[loc]=='>'||src[loc]=='<'||src[loc]=='&'||src[loc]=='|'){
				var t=src[loc]
				val+=src[loc];loc+=1;
				if(loc<len&&(src[loc]=='='||src[loc]==t)){val+=src[loc];loc+=1;}
				tokens.push(new token(val));
			}
			else if(issymbol(src[loc])){
				val+=src[loc];loc+=1;
				tokens.push(new token(val));
			}
			else System.abort("unknown char '{0}'".format(c))
		}
	}
}
//args=System.args
//Console.print(args)
//if(args.length()>=3){
//	var src=""
//	var f=Fileio.open(args[2])
//	while(!Fileio.eof(f))src+=Fileio.read_line(f)+"\n"
//	Console.print(src)
//	tokenize(src)
//	Fileio.close(f)
//}
//else tokenize(Console.read_line())
//Console.print(tokens)
//Console.print(tokens.length())
